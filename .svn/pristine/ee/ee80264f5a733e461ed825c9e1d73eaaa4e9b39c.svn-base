package facetoday.spring.web.controller;

import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import facetoday.service.PwdEncryption;
import facetoday.spring.service.BoardService;
import facetoday.spring.web.vo.BoardVo;
import facetoday.spring.web.vo.MemberVo;

@Controller
public class BoardController {
	private int updSupport_boardNum;
	
	@Resource(name="boardService")
	private BoardService boardService;
		
	@RequestMapping("/insert.do")
	@ResponseBody
	public String insertBoard(BoardVo boardVo) {
		System.out.println("글쓰기 요청 완료");
		String re = "0";
		
		int result = boardService.boardInsert(boardVo);
		if(result > 0) re ="1";
		
		return re;
	}
	
	@RequestMapping("/select.do")
	public ModelAndView selectBoardAll() {
		List<BoardVo> list = boardService.boardSelectAll();
		ModelAndView mv = new ModelAndView();
		mv.addObject("list",list);
		mv.setViewName("jsonView");
		return mv;
	}
	
	@RequestMapping("/delete.do")
	@ResponseBody
	public String deleteBoard(int board_num) {
		String re = "0";
		
		//console 확인용
		System.out.println("지울 글 번호:"+board_num);
		
		if(boardService.boardDelete(board_num)>0)
			re="1";
		
		return re;
	}
	
	@RequestMapping("/update.do")
	@ResponseBody
	public String updateBoard(String updateContent) {
		String re = "0";
		
		//console 확인용
		System.out.println("수정할 글 내용 및 번호:"+updateContent+","+updSupport_boardNum);
		
		BoardVo boardVo = new BoardVo(updSupport_boardNum,updateContent);
		
		if(boardService.boardUpdate(boardVo)>0)
			re="1";
		
		return re;
	}
	
	@RequestMapping("/join.do")
	@ResponseBody
	public String join(String username,String email,String password, String password_confirm,String birth) {
		String re="0";
		MemberVo memberVo = null;
		if (password.equals(password_confirm)) {
			memberVo = new MemberVo(email,username,PwdEncryption.pwdCode(password),birth);
			try {
				if(boardService.memberInsert(memberVo)>0)
					re="1";
			} catch (SQLException e) {
				System.out.println(e.getMessage());
				e.printStackTrace();
			}
		} else {
			System.out.println("비밀번호 불일치잼");
		}
		
		return re;
	}
	
	@RequestMapping("/signin.do")
	public ModelAndView signin(String signEmail, String signPasswd,final HttpSession session) {
		System.out.println("이해가 안 가기 시작했다.");
		System.out.println(signEmail+""+signPasswd);
		ModelAndView mv = new ModelAndView();
		MemberVo memberVo = null;
		
		try {
			memberVo = boardService.login(signEmail, signPasswd);
			
			if (memberVo == null) {
				mv.setViewName("/error");
			}
			else {
				mv.setViewName("/signin");
				session.setAttribute("userInfo",memberVo);
			}
		} catch (SQLException e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
				
		return mv;
	}
	
	@RequestMapping("/updateSupport.do")
	public void updateSupport(int board_num) {
		//console 확인 및 modal 글 번호 임시 저장.
		System.out.println("글 번호 :"+board_num);
		updSupport_boardNum = board_num;
		System.out.println(updSupport_boardNum);
	}
	
	@RequestMapping("/emotion.do")
	public void extractEmotion() {
		
	}
}